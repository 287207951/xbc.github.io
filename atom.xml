<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://xbcc123.github.io/</id>
    <title>小白菜</title>
    <updated>2019-10-15T06:55:20.418Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://xbcc123.github.io/"/>
    <link rel="self" href="https://xbcc123.github.io//atom.xml"/>
    <subtitle>小白菜</subtitle>
    <logo>https://xbcc123.github.io//images/avatar.png</logo>
    <icon>https://xbcc123.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 小白菜</rights>
    <entry>
        <title type="html"><![CDATA[babel6下使用jest单元测试]]></title>
        <id>https://xbcc123.github.io//post/babel6-xia-shi-yong-jest-dan-yuan-ce-shi</id>
        <link href="https://xbcc123.github.io//post/babel6-xia-shi-yong-jest-dan-yuan-ce-shi">
        </link>
        <updated>2019-10-15T06:54:27.000Z</updated>
        <content type="html"><![CDATA[<p><strong>背景：</strong></p>
<ol>
<li>
<p>项目中后端api地址虽然做了环境变量配置，但是还是有同学随意更改配置导致测试环境地址发布到生产环境</p>
</li>
<li>
<p>为了避免这种情况出现决定引入单元测试，在提交代码之前做一次测试校验</p>
</li>
</ol>
<p><strong>坑：</strong></p>
<ol>
<li>
<p>erp项目使用babel6，jest的babel配置需要babel7, 且无法屏蔽.babelrc配置，哭</p>
<p>解决方案： jest项目作为一个小项目引入有单独的package.json文件</p>
</li>
</ol>
<p><strong>文件结构：</strong></p>
<pre><code class="language-js">

├── jest                                           	//  jest项目
│   ├── babel.config.js                            	//  babel配置
│   │   ├── ...                              			
│   ├── jest.config.js                           	//  jest配置
│   │   ├── ...                              
│   ├── tests                                  		//  tests文件
│   │   ├── test.js                                 
│   │   package.json  								//  依赖包配置
│   jest.js                                         //  node脚本
│   .gitignore
│   package.json	


</code></pre>
<p><strong>配置jest环境</strong></p>
<p>执行<code>yarn global add jest</code> 或者<code>npm install jest --global</code>安装全局jest</p>
<p>执行<code>npm init</code> 初始化项目</p>
<p>执行<code>jest --init</code>初始化jest配置</p>
<p>执行<code>yarn add --dev babel-jest @babel/core @babel/preset-env</code>下载babel依赖</p>
<p>到这一步基础配置都安装好了</p>
<p><strong>babel配置</strong></p>
<p>babel让jest可以支持es6</p>
<pre><code class="language-js">
// babel.config.js
module.exports = {
  presets: [
    [
      '@babel/preset-env',
      {
        targets: {
          node: 'current',
        },
      },
    ],
  ],
};

</code></pre>
<p><strong>jest配置</strong></p>
<p>jest配置指定我们需要匹配测试的文件地址</p>
<pre><code class="language-js">	
// jest.config.js 

module.exports = {
    testMatch: [
        &quot;**/tests/**/*.[jt]s?(x)&quot;                  // 匹配tests文件夹以及子目录下的文件
    ],
}


</code></pre>
<p><strong>引入项目</strong></p>
<p>因为jest项目是独立于父项目的， 我们要关联这两个项目</p>
<ol>
<li>
<p>配置 <code>.gitignore</code> 隐藏 <code>node_modules</code></p>
<pre><code class="language-json">
# .gitignore

node_modules/
jest/node_modules/

</code></pre>
</li>
<li>
<p><code>npm i shelljs -D</code>  安装<code>shelljs</code>， 使用<code>shelljs</code> 执行jest下的测试文件</p>
<pre><code class="language-js">
// jest.js

const shell = require(&quot;shelljs&quot;);
shell.cd('jest')
shell.exec('jest')

</code></pre>
</li>
<li>
<p>配置父项目<code>package.json</code></p>
</li>
</ol>
<pre><code class="language-json">
# package.json    

&quot;scripts&quot;: {
    &quot;jest&quot;: &quot;node jest&quot;
}, 


</code></pre>
<p><strong>使用</strong></p>
<p>执行<code>node jest</code>或<code>npm run jest</code> 使用</p>
<hr>
<p><a href="https://github.com/xbcc123/jestTest">git地址</a></p>
<p><a href="https://jestjs.io/docs/en/getting-started">官网地址</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[git提交规范]]></title>
        <id>https://xbcc123.github.io//post/git-ti-jiao-gui-fan</id>
        <link href="https://xbcc123.github.io//post/git-ti-jiao-gui-fan">
        </link>
        <updated>2019-10-10T01:05:41.000Z</updated>
        <content type="html"><![CDATA[<h4 id="遇到的问题">遇到的问题</h4>
<ol>
<li>版本回退时无法快速定位到指定版本</li>
<li>无法知道项目中封版操作是哪一个commit</li>
<li>无法清晰的知道每次提交的记录</li>
</ol>
<p>####以下是commit提交规范</p>
<p>每次提交，Commit message 都包括三个部分：Header，Body 和 Footer。</p>
<p>其中，Header 是必需的，Body 和 Footer 可以省略。</p>
<pre><code class="language-json">[&lt;type&gt;]: (&lt;scope&gt;): &lt;subject&gt;
// 空一行
&lt;body&gt;
// 空一行
&lt;footer&gt;      
</code></pre>
<h4 id="header">Header</h4>
<p>Header部分只有一行，包括两个字段：<code>type</code>（必需）和<code>subject</code>（必需）。</p>
<p><code>type</code>用于说明 commit 的类别，只允许使用下面8个标识。</p>
<pre><code>feat：新功能（feature）
fix：修补bug
docs：文档（documentation）
style： 格式（不影响代码运行的变动）
refactor(ref)：重构（即不是新增功能，也不是修改bug的代码变动）
test：增加测试
chore：构建过程或辅助工具的变动
tag: 针对与每次版本的提交
revert: 撤销，版本回退
perf: 性能优化
</code></pre>
<p><code>subject</code>是 commit 目的的简短描述，不超过50个字符。</p>
<pre><code>以动词开头，使用第一人称现在时，比如修改/修复/增加 等等
example: 订单详情增加导出功能
</code></pre>
<h4 id="scope">scope</h4>
<p><code>scope</code>用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p>
<h4 id="body">Body</h4>
<p>Body 部分是对本次 commit 的详细描述，可以分成多行。下面是一个范例。</p>
<pre><code>xxx/xxx.vue  修改内容
xxx/xxx.vue  修改内容
</code></pre>
<h4 id="footer">Footer</h4>
<p>Footer 部分只用于两种情况。</p>
<ol>
<li>
<p><strong>不兼容变动</strong></p>
<p>如果当前代码与上一个版本不兼容，则 Footer 部分以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p>
</li>
</ol>
<pre><code>BREAKING CHANGE: 项目webpack升级到4.0版本
xx插件替换成xx插件
</code></pre>
<ol start="2">
<li><strong>关闭 bug/需求</strong></li>
</ol>
<pre><code>closes 3056, 11231
</code></pre>
<h3 id="revert">Revert</h3>
<p>还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以<code>revert:</code>开头，后面跟着被撤销 Commit 的 Header。</p>
<pre><code>[revert](pencil): 回退当前版本667ec到 sssee2
</code></pre>
<h3 id="建议">#建议</h3>
<p>​	文档综合了，公司项目git管理的实际情况，在某一些规范上进行了轻微修改，在平时提交fix和feat时，一般使用简写</p>
<pre><code>[feat]: 增加订单详情  closes xxxx (closes非必需)
[fix]: 修复xx情况下xx问题  closes xxxx (closes非必需)
[docs]: 修改md文件
[style]: 修改订单列表样式
[ref]: 重构utils.js下部分方法
[chore]: 增加xxx插件/xxxxloader
[tag]: 新建版本分支xxx
[revert]: 回退当前版本667ec到 sssee2
[perf]:  优化了xxx，提高了渲染速度
</code></pre>
<p>在某些复杂commit比如 <code>revert</code>，<code>chore</code> 等操作时最好在body，footer，描述清楚 遇到了什么问题，为何要这样做</p>
<pre><code>[revert]:(订单模块): 回退当前版本667ec到 sssee2

因为某次提交失误，造成xxx问题
xxx.vue
xxx.js

closes xxx
</code></pre>
<pre><code>[chore]:(项目组件, 项目构建)：增加公用组件库xxx和xxx公用一套组件

为了解决xx问题， 引入公用组件库，使用方式见xx.md文档
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[撸一个webpack基础配置]]></title>
        <id>https://xbcc123.github.io//post/lu-yi-ge-webpack-ji-chu-pei-zhi</id>
        <link href="https://xbcc123.github.io//post/lu-yi-ge-webpack-ji-chu-pei-zhi">
        </link>
        <updated>2019-10-10T00:51:03.000Z</updated>
        <content type="html"><![CDATA[<p>在模块化的开发过程中我们经常会使用webpack来帮助我们搭建一个良好的开发环境，提升开发效率；很多人对webpack的那么多配置项感到无从下手，下面是我总结的如何构建一个简单的webpack配置。</p>
<h2 id="准备工作">准备工作</h2>
<p>先看一下我们一个简单的webpack配置大概需要的目录结构，暂时我们只处理核心的build和config部分<br>
<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91c2VyLWdvbGQtY2RuLnhpdHUuaW8vMjAxOS84LzI4LzE2Y2Q4N2RiOWFkYWY0MTk?x-oss-process=image/format,png" alt=""></p>
<h2 id="build目录">build目录</h2>
<h3 id="基础配置">基础配置</h3>
<pre><code class="language-js">&lt;!--webpack.base.conf.js--&gt;

var path = require('path');
// 清空dist目录下面文件
var CleanWebpackPlugin = require('clean-webpack-plugin');
// 生成html静态文件
var HtmlWebpackPlugin = require('html-webpack-plugin');
// 提取静态文件
var CopyWebpackPlugin = require('copy-webpack-plugin')
var webpack = require('webpack');

module.exports = {
  // 基础目录，绝对路径，用于从配置中解析入口起点(entry point)和 loader
  context: path.resolve(__dirname, &quot;../&quot;),
  entry: {
      // babel的兼容包
      // app: ['babel-polyfill', './src/index.js'],
      app: './src/main.js',
  },
  output: {
      path: path.resolve(__dirname, '../dist'),
      // 代码分离出口配置项
      filename: 'static/js/[name].[hash].bundle.js',
  // 针对于loader的resolve配置
  }
  // Resolve 配置 Webpack 如何寻找模块所对应的文件
  resolve: {
      // 1. 添加为一个可解析的扩展名 
      // 2. 能够使用户在引入模块时不带扩展：import SomeFile from &quot;./somefile&quot;
      extensions: ['.', '.ts', '.js', 'jsx', '.json', '.vue', 'styl'],

      // 设置目录别名
      alias: {
          // 配置vue在编译build时使用，不设置只能在runtime使用
          'vue$': 'vue/dist/vue.esm.js',
          '@': path.resolve(__dirname, '../src'),
      },
      // 用户描述的json文件名
      // descriptionFiles: [&quot;package.json&quot;],
      // 解析目录时要使用的文件名
      mainFiles: [&quot;index&quot;],
      // webpack 解析模块时应该搜索的目录。
      modules: [&quot;node_modules&quot;],
  },
  module: {
      rules: [
          {
              test: /\.js$/,
              // loader包含的文件， 不设置默认package.json统计目录下的所有文件
              include: [path.resolve(__dirname, '../src')],
              // loader不包含的文件
              exclude: [/node-modules/],
              use: [
                  // 使用happypack后无法使用thread-loader
                  {
                      loader: 'thread-loader'
                  },
                  {
                      loader: 'babel-loader',
                      options: {
                          cacheDirectory: true, // 开启缓存
                          compact: false  // 不压缩
                      },
                  }
              ]
          },
          {
              test: /\.(png|svg|jpg|gif)$/,
              use: [
                  {
                      loader: 'file-loader',
                      options: {
                          limit: 10000,
                          name: 'static/img/[name].[hash:7].[ext]',
                      }
                  }
              ]
          },
          {
              test: /\.(woff|woff2|eot|ttf|otf)$/,
              use: [
                  {
                      loader: 'file-loader',
                      options: {
                          limit: 10000,
                          name: 'static/fonts/[name].[hash:7].[ext]',
                      }
                  }
              ]
          },
          {
              test: /\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/,
              use: [
                  {
                      loader: 'file-loader',
                      options: {
                          limit: 10000,
                          name: 'static/media/[name].[hash:7].[ext]',
                      }
                  }
              ]
          }
      ]
  },
  plugins: [
      new CleanWebpackPlugin(),
      new HtmlWebpackPlugin({
          filename: path.resolve(__dirname, '../dist/index.html'),
          template: 'index.html',
          inject: true,
      }),
};
</code></pre>
<h3 id="开发环境配置">开发环境配置</h3>
<pre><code class="language-js">&lt;!--webpack.dev.conf.js--&gt; 
var path = require('path');
var webpack = require('webpack');
var merge = require('webpack-merge');
var common = require('./webpack.base.conf.js');
//  引入环境变量
var config = require('../config')

module.exports = merge(common, {
    mode: 'development',
    // 开发工具使用原始代码
    // devtool: 'source-map',
    devtool: 'cheap-module-eval-source-map',

    module: {
        rules: [
            {
                test: /\.css$/,
                use: [
                    'style-loader',
                    'css-loader',
                ],
            },
        ]
    },
    devServer: {
        // 你要提供哪里的内容给虚拟服务器用。这里最好填 绝对路径。默认当前目录
        contentBase: [path.join(__dirname, &quot;../dist&quot;)],
        // 热模块更新 webpack.HotModuleReplacementPlugin （HMR）
        hot: true,
        // 控制浏览器控制台消息 none, error, warning 或者 error
        clientLogLevel: &quot;warning&quot;,
        // 如果为 true ，页面出错不会弹出 404 页面。
        historyApiFallback: true,
        // 自动打开浏览器
        open: true,
        // 索引文件的文件名
        index: 'index.htm',
        // 使用ip访问
        useLocalIp: true,
        watchOptions: {
            //不监听的文件或者文件夹，支持正则匹配 监听大量文件系统会导致大量的 CPU 或内存占用
            //默认为空
            ignored: /node_modules/,
            //监听到变化发生后会等300ms再去执行动作，防止文件更新太快
            //默认为300ms
            aggregateTimeout: 100,
            //判断文件是否发生变化是通过不停询问系统指定文件有没有变化实现的
            //默认每秒问1000次
            poll: 1000
        },
    },
    plugins: [
        new webpack.DefinePlugin({
            'process.env': config.development.envObj
        }),
        new webpack.HotModuleReplacementPlugin(),  // 开启HMR 模块热替换
        new webpack.NamedModulesPlugin(),  // 开启 HMR的时候使用该插件会显示模块的相对路径
        new webpack.NoEmitOnErrorsPlugin(), // webpack跳过编译错误
    ]
});

</code></pre>
<h3 id="生产环境配置">生产环境配置</h3>
<pre><code class="language-js">&lt;!--webpack.prod.conf.js--&gt; 
var path = require('path');
var webpack = require('webpack');
var merge = require('webpack-merge');
// 提取css
var MiniCssExtractPlugin = require('mini-css-extract-plugin');
// webpack打包依赖
var common = require('./webpack.base.conf.js');
var TerserPlugin = require('terser-webpack-plugin');
module.exports = smp.wrap(merge(common, {
    // 开启多进程编译并开启缓存
    optimization: {
        minimizer: [
            new TerserPlugin({
                cache: true,
                parallel: true,
            }),
        ],
    },
    mode: 'production',
    devtool: false,  // 生产环境不使用sourceMap'
    module: {
        rules: [
            {
                test: /\.css$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    'css-loader'
                ],
            },
        ]
    },
    plugins: [
        // 优化点 代码分离css
        new MiniCssExtractPlugin({
            filename: 'static/css/[name].[contenthash].css',
        }),
    ],
})
)
</code></pre>
<h3 id="打包配置">打包配置</h3>
<pre><code class="language-js">&lt;!--build.js--&gt; 
var webpack = require('webpack');
var config = require('../config')
var configBuild = require('./webpack.prod.conf')
var merge = require('webpack-merge');
var env = process.argv.filter((val, index, array) =&gt; {
    return index &gt;= 2
})[0];
var setEnv = {
    plugins: [
        new webpack.DefinePlugin({
            'process.env': config[env].envObj
        }),
    ]
}
var obj = merge(configBuild, setEnv)
var compiler = webpack(obj);
compiler.run((err, stats) =&gt; {
    console.log(stats.toString({
        colors: true,
        // 不显示模块信息
        modules: false,
        children: false,
        chunks: false,
        chunkModules: false
    }));
});
</code></pre>
<h2 id="config目录">config目录</h2>
<h3 id="环境变量配置">环境变量配置</h3>
<pre><code class="language-js">module.exports = {
    // 环境变量配置
    development: {
        envObj: {
            NODE_ENV: '&quot;development&quot;',
            API_HOST: '&quot;http://xxx.xxx.xx.x:xxxx&quot;',
            API_IMG: '&quot;http://xxx.xxx.xx.x:xxxx&quot;',
        }
    },
    production: {
        envObj: {
            NODE_ENV: '&quot;production&quot;',
            API_HOST: '&quot;http://xxx.xxx.xx.x:xxxx&quot;',
            API_IMG: '&quot;http://xxx.xxx.xx.x:xxxx&quot;'
        }
    },
    test: {
        envObj: {
            NODE_ENV: '&quot;test&quot;',
            API_HOST: '&quot;http://xxx.xxx.xx.x:xxxx&quot;',
            API_IMG: '&quot;http://xxx.xxx.xx.x:xxxx&quot;'
        }
    },
}
</code></pre>
<ol>
<li>针对于不懂的配置，代码中大都有注释，Vue，React项目大都可以在此基础上进行简单扩展使用；</li>
<li>有时间会附上Vue配置和React配置</li>
<li>如需了解webpack如何优化 <a href="https://blog.csdn.net/github_39506988/article/details/91044287">点击查看</a></li>
</ol>
]]></content>
    </entry>
</feed>